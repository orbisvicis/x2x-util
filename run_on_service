#!/usr/bin/env python3

import string
import argparse
import subprocess
import zeroconf


class ListenAndSpawn:
    def __init__(self, name, command):
        self.name = name
        self.command = command
        self.process = None

    def command_substitute(self, info):
        return [string.Template(i).safe_substitute(vars(info))
                for i in self.command]

    def remove_service(self, zeroconf, type, name):
        pass

    def add_service(self, zeroconf, type, name):
        if name == self.name:
            if self.process is None or self.process.poll() is not None:
                info = zeroconf.get_service_info(type, name)
                self.process = subprocess.Popen(self.command_substitute(info))


parser = argparse.ArgumentParser\
        ( description='Dispatch a command when a matching zeroconf service is added'
        )
parser.add_argument\
        ( "type"
        , help="zeroconf service type, i.e. '_http._tcp.local.'"
        )
parser.add_argument\
        ( "name"
        , help="zeroconf service name"
        )
parser.add_argument\
        ( "command"
        , nargs=argparse.REMAINDER
        , metavar="<command>"
        , help="""
             command/arguments as parsed by the shell with
             template-based substitution (PEP-292) based on the
             zeroconf ServiceInfo object attributes (type, name,
             address, port, weight, priority, server, properties,
             text).
             """
        )

args = parser.parse_args()
if args.command:
    zc = zeroconf.Zeroconf()
    ls = ListenAndSpawn(args.name, args.command)
    bw = zeroconf.ServiceBrowser(zc, args.type, ls)
    bw.join()
    zc.close()
else:
    print("No command, exiting...")
